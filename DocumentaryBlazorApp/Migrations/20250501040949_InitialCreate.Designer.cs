// <auto-generated />
using System;
using DocumentaryBlazorApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DocumentaryBlazorApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250501040949_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.14");

            modelBuilder.Entity("DocumentaryBlazorApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DocumentaryBlazorApp.Models.Documentary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Documentaries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Nature",
                            Description = "A BBC nature documentary series exploring Earth's diverse environments and wildlife.",
                            Director = "Alastair Fothergill",
                            Duration = 550,
                            ImageUrl = "/images/planetEarth.jpg",
                            Language = "English",
                            Review = "A breathtaking visual journey through Earth's most remote locations. The cinematography and narration are unforgettable.",
                            Title = "Planet Earth",
                            TrailerUrl = "https://www.youtube.com/watch?v=I8Az_IIgw4U",
                            Year = 2006
                        },
                        new
                        {
                            Id = 2,
                            Category = "Technology",
                            Description = "Former tech insiders reveal how social media is reprogramming civilization.",
                            Director = "Jeff Orlowski",
                            Duration = 94,
                            ImageUrl = "/images/theSocialDilemma.jpg",
                            Language = "English",
                            Review = "A chilling look at the manipulation behind social platforms. It serves as an urgent call to rethink our digital lives.",
                            Title = "The Social Dilemma",
                            TrailerUrl = "https://www.youtube.com/watch?v=uaaC57tcci0",
                            Year = 2020
                        },
                        new
                        {
                            Id = 3,
                            Category = "History",
                            Description = "An exploration of the U.S. prison system and racial inequality.",
                            Director = "Ava DuVernay",
                            Duration = 100,
                            ImageUrl = "/images/13th.jpg",
                            Language = "English",
                            Review = "A powerful and essential documentary about systemic racism. It highlights the deep-rooted issues within the American justice system.",
                            Title = "13th",
                            TrailerUrl = "https://www.youtube.com/watch?v=krfcq5pF8u8",
                            Year = 2016
                        },
                        new
                        {
                            Id = 4,
                            Category = "Adventure",
                            Description = "Follows Alex Honnold as he attempts to climb El Capitan without ropes.",
                            Director = "Elizabeth Chai Vasarhelyi, Jimmy Chin",
                            Duration = 100,
                            ImageUrl = "/images/freeSolo.jpg",
                            Language = "English",
                            Review = "Gripping and visually stunning—a triumph of human endurance. The intensity and beauty of the climb are unmatched.",
                            Title = "Free Solo",
                            TrailerUrl = "https://www.youtube.com/watch?v=urRVZ4SW7WU",
                            Year = 2018
                        },
                        new
                        {
                            Id = 5,
                            Category = "Wildlife",
                            Description = "A filmmaker forms an unusual bond with an octopus in a kelp forest.",
                            Director = "Pippa Ehrlich, James Reed",
                            Duration = 85,
                            ImageUrl = "/images/myOctopusTeacher.jpg",
                            Language = "English",
                            Review = "A beautiful and emotional underwater tale of connection. The bond between man and octopus is touching and profound.",
                            Title = "My Octopus Teacher",
                            TrailerUrl = "https://www.youtube.com/watch?v=3s0LTDhqe5A",
                            Year = 2020
                        },
                        new
                        {
                            Id = 6,
                            Category = "Music",
                            Description = "A behind-the-scenes look at Michael Jackson's final concert preparations.",
                            Director = "Kenny Ortega",
                            Duration = 111,
                            ImageUrl = "/images/thisIsIt.jpg",
                            Language = "English",
                            Review = "An intimate tribute to the King of Pop's final masterpiece. It gives fans an unparalleled look into Michael's vision and artistry.",
                            Title = "This Is It",
                            TrailerUrl = "https://www.youtube.com/watch?v=zUniG6F_RzY",
                            Year = 2009
                        },
                        new
                        {
                            Id = 7,
                            Category = "Nature",
                            Description = "A portrayal of emperor penguins’ annual journey through the Antarctic.",
                            Director = "Luc Jacquet",
                            Duration = 80,
                            ImageUrl = "/images/marchOfThePenguins.jpg",
                            Language = "English",
                            Review = "Heartwarming and visually stunning—penguins as you've never seen them. The journey of survival and love is deeply moving.",
                            Title = "March of the Penguins",
                            TrailerUrl = "https://www.youtube.com/watch?v=ohL8rF_jluA",
                            Year = 2005
                        },
                        new
                        {
                            Id = 8,
                            Category = "Finance",
                            Description = "Exposes the shocking truth behind the 2008 financial crisis.",
                            Director = "Charles Ferguson",
                            Duration = 108,
                            ImageUrl = "/images/insideJob.jpg",
                            Language = "English",
                            Review = "A brilliant and sobering analysis of corporate greed and corruption. It provides a detailed and terrifying account of the financial collapse.",
                            Title = "Inside Job",
                            TrailerUrl = "https://www.youtube.com/watch?v=FzrBurlJUNk",
                            Year = 2010
                        },
                        new
                        {
                            Id = 9,
                            Category = "Nature",
                            Description = "A science documentary series explaining the inner workings of the cosmos.",
                            Director = "Louise Say (series producer)",
                            Duration = 430,
                            ImageUrl = "/images/howTheUniverseWorks.jpg",
                            Language = "English",
                            Review = "Fascinating insights into cosmic phenomena presented clearly and vividly. It's an awe-inspiring journey through space and time.",
                            Title = "How the Universe Works",
                            TrailerUrl = "https://www.youtube.com/watch?v=Q1frjo2yvrM",
                            Year = 2010
                        },
                        new
                        {
                            Id = 10,
                            Category = "History",
                            Description = "An in-depth documentary series covering the history of the Vietnam War.",
                            Director = "Ken Burns, Lynn Novick",
                            Duration = 1080,
                            ImageUrl = "/images/theVietnamWar.jpg",
                            Language = "English",
                            Review = "Comprehensive, emotional, and brutally honest—a monumental achievement. The series paints an unflinching portrait of the war's devastating impact.",
                            Title = "The Vietnam War",
                            TrailerUrl = "https://www.youtube.com/watch?v=iWFzaUlZz-k",
                            Year = 2017
                        });
                });

            modelBuilder.Entity("DocumentaryBlazorApp.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("TEXT");

                    b.Property<int>("DocumentaryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DocumentaryId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatePosted = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentaryId = 1,
                            Rating = 4
                        },
                        new
                        {
                            Id = 2,
                            DatePosted = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentaryId = 3,
                            Rating = 2
                        },
                        new
                        {
                            Id = 3,
                            DatePosted = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentaryId = 6,
                            Rating = 4
                        },
                        new
                        {
                            Id = 4,
                            DatePosted = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentaryId = 7,
                            Rating = 1
                        },
                        new
                        {
                            Id = 5,
                            DatePosted = new DateTime(2024, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentaryId = 3,
                            Rating = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DocumentaryBlazorApp.Models.Review", b =>
                {
                    b.HasOne("DocumentaryBlazorApp.Models.Documentary", "Documentary")
                        .WithMany("Reviews")
                        .HasForeignKey("DocumentaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Documentary");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DocumentaryBlazorApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DocumentaryBlazorApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocumentaryBlazorApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DocumentaryBlazorApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocumentaryBlazorApp.Models.Documentary", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
